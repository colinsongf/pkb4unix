#!/usr/bin/python3

from sys import argv
import os
import textwrap

try:
    import PKB4Unix.conf
except ImportError:
    print("Unable to locate Python library PKB4Unix")
    exit(1)

confvars = sorted(PKB4Unix.conf.confvars, key=lambda v: v.name)

rdf_tools = [
    ('merge', 'merge graphs'),
    ('construct', 'construct a graph'),
    ('edit', 'read from stdin, edit, print on stdout'),
    ('format-csv', 'csv formatter'),
    ('uuid', 'generate a urn:uuid URI')
]
plumbing = [
    ('sparql-load', 'load a graph into the endpoint'),
    ('sparql-query', 'query the endpoint'),
    ('sparql-query-template', 'create a template of a SPARQL query'),
    ('sparql-render', 'Render resource with Fresnel'),
    ('sparql-save', 'write a graph from the endpoint to a file'),
]
workflow = [
    ('sparql-construct', 'constructing a graph based on templates'),
    ('sparql-graph', 'graph manipulations'),
    ('sparql-merge', 'merge two graphs in the endpoint'),
    ('sparql-rm', 'delete a graph from the endpoint'),
    ('search', 'search the semantic web for resources'),
    ('sparql-discover', 'search the semantic web for graphs'),
]
subcommands = [c for (c,info) in rdf_tools + plumbing + workflow]

scriptname = argv[0].split("/")[-1]
arglist = argv[1:]
opts = { var.cmdline_short: var for var in confvars if var.cmdline_short }
opts.update({ var.cmdline_long: var for var in confvars if var.cmdline_long })

do_help = False
while arglist and (arglist[0] in opts or arglist[0] in {"--help", "help", "-h"}):
    if arglist[0] in {"--help", "help", "-h"}:
        do_help = True
        arglist = arglist[1:]
    else:
        var = opts[arglist[0]]
        var.set(arglist[1], 'command line')
        arglist = arglist[2:]

# Applying changes to the environment
for var in confvars:
    var.setenv()

def help_entryindent(key, info, nlfirst=False):
    if nlfirst:
        res = textwrap.fill(
            key,
            initial_indent=" "*4,
            subsequent_indent=" "*4
        )
        res += "\n"
        res += textwrap.fill(
            info,
            initial_indent=" "*24,
            subsequent_indent=" "*24
        )
        return res
    else:
        return textwrap.fill(
            "{:20}{}".format(key, info),
            initial_indent=" "*4,
            subsequent_indent=" "*24
        )

if do_help:
    print(textwrap.dedent('''
        Knowledge Base Toolkit

        usage: {} {}
               SUBCOMMAND ...
    '''.format(
        scriptname, 
        ' '.join(('[{} {}]'.format(var.cmdline_short, var.metavar) for var in confvars if var.cmdline_short))
    )))
    print("Optional arguments:")
    for var in (v for v in confvars if v.fromcmdline):
        print(help_entryindent(
            "{v.cmdline_short} {v.metavar}, {v.cmdline_long} {v.metavar}".format(v=var),
            var.help,
            nlfirst=True
        ))
    print("")
    print("Help:")
    print(help_entryindent("help, -h, --help", "Show this help message and exit"))
    print("")
    print("Workflow commands:")
    for (c, info) in workflow:
        print(help_entryindent(c, info))
    print("")
    print("Plumbing commands:")
    for (c, info) in plumbing:
        print(help_entryindent(c, info))
    print("")
    print("RDF tools:")
    for (c, info) in rdf_tools:
        print(help_entryindent(c, info))
    print("")
    print("Current Configuration:")
    for var in confvars:
        print("{}:\n    {}\n    (by {})".format(var.name, var.value or "(not set)", var.blame))

if do_help:
    print("")
    exit(0)

# Handle common errors
if not arglist:
    print("A subcommand must be provided. Please refer to `{} help`".format(scriptname))
    exit(1)
if arglist[0] and arglist[0][0]=='-':
    print("There is no global option '{}'. Please refer to `{} help`".format(arglist[0], scriptname))
    exit(1)
if arglist[0] not in subcommands:
    print("Subcommand '{}' not found. Please refer to `{} help`".format(arglist[0], scriptname))
    exit(1)

################

executable = 'know-'+arglist[0]
args = arglist[1:]

os.execvp(executable, [executable] + args)




